package phylostream.blang

import blang.distributions.Exponential
import conifer.EvolutionaryModel
import conifer.SequenceAlignment
import conifer.UnrootedTree
import phylostream.io.Synthetic
import phylostream.io.Synthetic.Realization

import static conifer.Utils.*
import phylostream.io.Dataset
import phylostream.io.Globals

model ReferenceModel {
  param Dataset data
  param Realization realization ?: {
    if (data instanceof Synthetic) {
      val realization = data.next()
      Globals::generatingTree = realization.trueTree
    } else throw new RuntimeException
    if (data instanceof Synthetic) data.next
    else null
  }
  random SequenceAlignment observations ?: {
    val result = realization.nextDataset as SequenceAlignment
    if (data instanceof Synthetic) {
      Globals::alignment = result
    } else throw new RuntimeException
    result
  }
  random UnrootedTree tree ?: unrootedTree(observations.observedTreeNodes)
  param EvolutionaryModel evoModel ?: realization.trueModel
  laws {
    tree  ~ NonClockTreePrior(Exponential::distribution(10.0))
    observations | tree, evoModel ~ UnrootedTreeLikelihood(tree, evoModel)
  }
}